# ddns-digital-ocean
# Copyright (C) 2023  Tyler Nivin <tyler@nivin.tech>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: AGPL-3.0-or-later
# Copyright 2023 - 2024, Tyler Nivin <tyler@nivin.tech>
#   and the ddns-digital-ocean contributors

[project]
name = "ddns_digital_ocean"
version = "0.4.0"
description = "Python-based CLI tool for managing dynamic dns."
authors = [{ name = "Tyler Nivin", email = "tyler@nivin.tech" }]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.12"

classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",

    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    # Specify the Python versions you support here.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",

    # Topics
    "Topic :: Internet",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

dependencies = [
    "rich>=13.8.0",
    "requests>=2.32.3",
    "more-itertools>=10.4.0",
]

[project.urls]
Repository = "https://github.com/nivintw/ddns"
Issues = "https://github.com/nivintw/ddns/issues"

[project.scripts]
do_ddns = 'ddns_digital_ocean.ddns:run'


[tool.uv]
dev-dependencies = [
    "pytest>=8.3.2",
    "ruff>=0.6.2",
    "pytest-check>=2.3.1",
    "pytest-mock>=3.14.0",
    "responses>=0.25.3",
]

[tool.ruff]
# Uncomment to over-ride the line-length used by ruff.
# Allowing line-length 100 for now due to prior code.
line-length = 100

[tool.ruff.lint]
# Configure which ruff rules to enable.
select = [
    "E",   # pycodestyle - errors
    "W",   # pycodestyle - warnings
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "RUF", # Ruff-specific rules
    "S",   # Flake8-bandit
    "PTH", # flake8-use-pathlib
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
