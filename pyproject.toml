[tool.poetry]
name = "ddns_digital_ocean"
version = "0.3.0"
description = "Python-based CLI tool for managing dynamic dns."
authors = ["Tyler Nivin <tyler@nivin.tech>"]
readme = "README.md"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
do_ddns = 'ddns_digital_ocean.ddns:run'


[tool.poetry.dependencies]
python = "^3.9"
rich = "^13.6.0"
requests = "^2.31.0"

[tool.poetry.group.linters.dependencies]
ruff = "^0.6.2"

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.2"
pytest-check = "^2.3.1"
pytest-mock = "^3.14.0"

[tool.ruff]
# Uncomment to over-ride the line-length used by ruff.
# Allowing line-length 100 for now due to prior code.
line-length = 100

[tool.ruff.lint]
# Configure which ruff rules to enable.
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # Unused noqa comments
    "RUF100",
    # Flake8-bandit
    "S"
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
