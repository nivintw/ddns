# digital-ocean-dynamic-dns
# Copyright (C) 2023 Tyler Nivin <tyler@nivin.tech>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
#   and associated documentation files (the "Software"), to deal in the Software
#   without restriction, including without limitation the rights to use, copy, modify, merge,
#   publish, distribute, sublicense, and/or sell copies of the Software,
#   and to permit persons to whom the Software is furnished to do so,
#   subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#   DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#   OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT
# Copyright 2024 - 2024, Tyler Nivin <tyler@nivin.tech>
#   and the digital-ocean-dynamic-dns contributors

name: ci

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch the full history
          # this is required for the hawkeye license header checker to be able to
          # determine the modified date of the files.
          fetch-depth: 0
      - uses: actions/setup-python@v4
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --hook-stage manual --all-files

  tests:
    permissions:
      pull-requests: write
      contents: write
      checks: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - uses: yezz123/setup-uv@v4
      - name: Test with pytest
        run: uv run pytest --cov=digital_ocean_dynamic_dns --junitxml=junit/test-results.xml --cov-report=xml:coverage.xml --cov-report=html
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        id: coverageComment
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: junit/test-results.xml
      - name: Update Gist for Coverage Badge in README.md
        uses: schneegans/dynamic-badges-action@v1.7.0
        if: ${{ github.ref_name == github.event.repository.default_branch }}
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: d3939953524d972fa08a6e494be4e12f # repo-specific # pragma: allowlist secret
          filename: pytest-coverage-comment__main.json
          label: Coverage Report
          message: ${{ steps.coverageComment.outputs.coverage }}
          color: ${{ steps.coverageComment.outputs.color }}
          namedLogo: python

  version-manage:
    if: github.ref_name == github.event.repository.default_branch && github.actor != 'nivintw-ci-app[bot]'
    needs: [pre-commit, tests]
    concurrency:
      group: release
      cancel-in-progress: true
    permissions:
      pull-requests: write
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Get App Token for write CI actions
        # Special Github App user required to push directly to branches
        # that otherwise restrict direct pushes.
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CI_APP_APPID }}
          private-key: ${{ secrets.CI_APP_SECRET }}
      - name: Checkout with App Token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      - uses: yezz123/setup-uv@v4 # need uv available to run the build command.
      - name: Python Semantic Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          uv tool install python-semantic-release
          uv tool run semantic-release version
          uv tool run semantic-release publish
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TWINE_PYPI_UPLOAD_TOKEN }}
        run: |
          uv tool run twine upload --non-interactive dist/*
